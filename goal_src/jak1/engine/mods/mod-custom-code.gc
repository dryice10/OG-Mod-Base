    ;;-*-Lisp-*-
    (in-package goal)

    ;; name: mod-custom-code.gc
    ;; name in dgo: mod-custom-code
    ;; dgos: TODO


    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; What is this file for.
    ;;;;;;;;;;;;;;;;;;;;;;;;;;

    #| This file contains function defenitions that are pre placed in the mod base,
    so if you place custom code inside of these functions, it will exectue based on
    the name of the function, for example, if you place (set! (-> *game-info* fuel) (+ (-> *game-info* fuel) 1))
    to the function named runs-on-orb-pickup, then jaks powercell count will increase each time you collect
    an orb |#


    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; Begin function defintions.
    ;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun draw-plant-deload-info ()
  (when (and (-> *speedrun-info* should-display-plant-deload-info?)
             (not (paused?)))
    (let ((y-offset (if (-> *speedrun-info* should-display?) 7 3))
          (hp (the happy-plant (process-by-ename "happy-plant-1")))
          )
      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf))
                                        (bucket-id subtitle))
        (cond
          (hp
            ;; happy-plant visible, determine next plant
            (when (-> hp alt-actor)
              (let* ((gp-0 (-> hp alt-actor extra process))
                     (cur-dp (if (and (nonzero? gp-0) (type-type? (-> gp-0 type) dark-plant))
                              (the dark-plant gp-0)
                              ))
                     (next-dp (the dark-plant #f))
                     (dp-done? 0)
                     )
                ;; deconstructed (dark-plants-all-done) function
                (when cur-dp
                  ;; special case for first in list
                  (if (!= (-> cur-dp state) dark-plant-gone)  ;; current isnt gone
                    (set! dp-done? -1)
                    )
                  (if (zero? (-> cur-dp num-alts))  ;; no next
                    (set! dp-done? 1)
                    (set! next-dp (the-as dark-plant (-> cur-dp alts 0 extra process)))
                    )
                  ;; loop thru list
                  (while (zero? dp-done?)
                    (cond
                      ((!= (-> next-dp state) dark-plant-gone)  ;; current isnt gone
                        (set! dp-done? -1)
                        )
                      ((zero? (-> next-dp num-alts))  ;; no next
                        (set! dp-done? 1)
                        )
                      (else 
                        (let ((tmp (the-as dark-plant (-> next-dp alts 0 extra process))))
                          (cond
                            ((not tmp)  ;; next doesnt exist
                              (set! dp-done? 1)
                              )
                            ((= tmp cur-dp) ;; next points to itself
                              (set! dp-done? 1)
                              )
                            (else ;; moving to next
                              (set! cur-dp next-dp)
                              (set! next-dp tmp)
                              )
                            )
                          )
                        )
                      )
                    )
                  )

                (add-debug-x
                  #t
                  (bucket-id debug-no-zbuf)
                  (-> cur-dp root trans)
                  (new 'static 'rgba :r #x80 :g #xff :b #x80 :a #x80)
                  )
                (set! (-> cur-dp draw color-mult x) 5.0)
                
                (cond
                  (next-dp
                    ;; next dark-plant is spawned
                    (draw-string-xy (string-format "happy-plant-1 spawned ~%cur ~S ~S ~%next ~S ~S"
                                                  (-> cur-dp name) (-> cur-dp state name)
                                                  (-> next-dp name) (-> next-dp state name)
                                                  )
                                  buf 0 (- 220 (* 8 y-offset)) (font-color flat-yellow) (font-flags shadow kerning))

                    (add-debug-x
                      #t
                      (bucket-id debug-no-zbuf)
                      (-> next-dp root trans)
                      (new 'static 'rgba :r #xff :g #x00 :b #x00 :a #x80)
                      )
                    (if (= (-> cur-dp state) dark-plant-gone)
                      (set! (-> next-dp draw color-mult x) 5.0) ;; highlight next if cur is gone
                      )
                    )
                  (else
                    ;; next dark-plant is depspawned
                    (draw-string-xy (string-format "happy-plant-1 spawned ~%cur ~S ~S ~%next despawned!"
                                                  (-> cur-dp name) (-> cur-dp state name)
                                                  )
                                  buf 0 (- 220 (* 8 y-offset)) (font-color flat-yellow) (font-flags shadow kerning))
                    )
                  )
                )
              )
            )
          (else
            ;; happy-plant not visible
            
            (draw-string-xy (string-format "~%~%happy-plant-1 despawned")
                            buf 0 (- 220 (* 8 y-offset)) (font-color flat-yellow) (font-flags shadow kerning))
            )
          )
        )
      )
    )
  (none)
  )

    (defun runs-every-frame ()
      ;;(increase-power-cell-by-one) This is a call to increase-power-cell-by-one defined in mod-common-functions.gc
      
      (if show-speedometer?
        (j1-speedometer-on)
        (j1-speedometer-off)
        )

      (if (-> *speedrun-info* show-input-display?)
        (input-display-on)
        (input-display-off)
        )

      (when *debug-segment*
        ;; (orb-placer-maintenance) ;; ensure orb-placer is spawned/killed as requested, debug menu is updated
        ;; (debug-maybe-draw-bottom-height)
        (debug-maybe-draw-greensage-cutscene-plane)
        )

      (none)
      )

    (defun runs-on-orb-pickup ((parent process-tree))
      (let* ((from-cache? (and parent (type-type? (-> parent type) orb-cache-top))))
        ;; Code here runs on ANY orb pickup


        (when from-cache?
          ;; Code here runs only if the orb was from an orb cache

          )

        (when (not from-cache?)
          ;; Code here runs only if the orb was NOT from an orb cache

          )
        )
      (none)
      )

    (defun runs-on-fly-pickup ()
      ;; Code here runs on any scout fly pickup

      (none)
      )

    (defun runs-on-cell-pickup ((cell-event symbol))
      (case cell-event
        (('pickup)      
          ;; Code here runs as soon as you pickup a powercell

          )
        (('cutscene-end)      
          ;; Code here runs at the end of any powercell cutscene

          )
        )

      (none)
      )

    (defun runs-on-eco-pickup ((eco-type pickup-type) (parent process-tree))
      (let* ((from-vent? (and parent (type-type? (-> parent type) vent))))
        ;; Code here runs as soon as you pickup ANY eco

        (case eco-type
          (((pickup-type eco-yellow))      
            ;; Code here runs as soon as you pickup yellow eco

            )
          (((pickup-type eco-red))      
            ;; Code here runs as soon as you pickup red eco

            )
          (((pickup-type eco-blue))      
            ;; Code here runs as soon as you pickup blue eco

            )
          (((pickup-type eco-pill))      
            ;; Code here runs as soon as you pickup small green eco

            )
          (((pickup-type eco-green))      
            ;; Code here runs as soon as you pickup big green eco 

            )
          )
        
        (when from-vent?
          ;; Code here runs only if the eco was picked up from a vent

          )
        )

      (none)
      )

    (defun runs-on-jak-spawn ()
      ;; Code here runs every time jak spawns (loading a file new game or death)
      
      ;;uncomment this to use custom music for custom levels - the function is in mod-common-functions.gc
      ;;(process-spawn-function process music-manager-proc)
      (none)
      )

    (defun runs-on-jak-death ((death-event symbol))
      (case death-event
        (('dying)
          ;; Code here runs immediately every time jak dies, before any death animation or death cutscene
          
          )
        (('blackout)
          ;; Code here runs after jak dies (and any death cutscene finishes), during the blackout before he spawns

          )
        )
      
      (none)
      )


    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; deprecated function defintions.
    ;;;;;;;;;;;;;;;;;;;;;;;;;;

    #| these are no longer recommended/supported however we include them anyways to not break anyones mods.
    |#